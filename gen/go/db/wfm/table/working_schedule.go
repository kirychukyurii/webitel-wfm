//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var WorkingSchedule = newWorkingScheduleTable("wfm", "working_schedule", "")

type workingScheduleTable struct {
	postgres.Table

	// Columns
	ID                   postgres.ColumnInteger
	DomainID             postgres.ColumnInteger
	CreatedAt            postgres.ColumnTimestampz
	CreatedBy            postgres.ColumnInteger
	UpdatedAt            postgres.ColumnTimestampz
	UpdatedBy            postgres.ColumnInteger
	Name                 postgres.ColumnString
	State                postgres.ColumnInteger
	TeamID               postgres.ColumnInteger
	CalendarID           postgres.ColumnInteger
	StartDateAt          postgres.ColumnDate
	EndDateAt            postgres.ColumnDate
	StartTimeAt          postgres.ColumnInteger
	EndTimeAt            postgres.ColumnInteger
	BlockOutsideActivity postgres.ColumnBool

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type WorkingScheduleTable struct {
	workingScheduleTable

	EXCLUDED workingScheduleTable
}

// AS creates new WorkingScheduleTable with assigned alias
func (a WorkingScheduleTable) AS(alias string) *WorkingScheduleTable {
	return newWorkingScheduleTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new WorkingScheduleTable with assigned schema name
func (a WorkingScheduleTable) FromSchema(schemaName string) *WorkingScheduleTable {
	return newWorkingScheduleTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new WorkingScheduleTable with assigned table prefix
func (a WorkingScheduleTable) WithPrefix(prefix string) *WorkingScheduleTable {
	return newWorkingScheduleTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new WorkingScheduleTable with assigned table suffix
func (a WorkingScheduleTable) WithSuffix(suffix string) *WorkingScheduleTable {
	return newWorkingScheduleTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newWorkingScheduleTable(schemaName, tableName, alias string) *WorkingScheduleTable {
	return &WorkingScheduleTable{
		workingScheduleTable: newWorkingScheduleTableImpl(schemaName, tableName, alias),
		EXCLUDED:             newWorkingScheduleTableImpl("", "excluded", ""),
	}
}

func newWorkingScheduleTableImpl(schemaName, tableName, alias string) workingScheduleTable {
	var (
		IDColumn                   = postgres.IntegerColumn("id")
		DomainIDColumn             = postgres.IntegerColumn("domain_id")
		CreatedAtColumn            = postgres.TimestampzColumn("created_at")
		CreatedByColumn            = postgres.IntegerColumn("created_by")
		UpdatedAtColumn            = postgres.TimestampzColumn("updated_at")
		UpdatedByColumn            = postgres.IntegerColumn("updated_by")
		NameColumn                 = postgres.StringColumn("name")
		StateColumn                = postgres.IntegerColumn("state")
		TeamIDColumn               = postgres.IntegerColumn("team_id")
		CalendarIDColumn           = postgres.IntegerColumn("calendar_id")
		StartDateAtColumn          = postgres.DateColumn("start_date_at")
		EndDateAtColumn            = postgres.DateColumn("end_date_at")
		StartTimeAtColumn          = postgres.IntegerColumn("start_time_at")
		EndTimeAtColumn            = postgres.IntegerColumn("end_time_at")
		BlockOutsideActivityColumn = postgres.BoolColumn("block_outside_activity")
		allColumns                 = postgres.ColumnList{IDColumn, DomainIDColumn, CreatedAtColumn, CreatedByColumn, UpdatedAtColumn, UpdatedByColumn, NameColumn, StateColumn, TeamIDColumn, CalendarIDColumn, StartDateAtColumn, EndDateAtColumn, StartTimeAtColumn, EndTimeAtColumn, BlockOutsideActivityColumn}
		mutableColumns             = postgres.ColumnList{DomainIDColumn, CreatedAtColumn, CreatedByColumn, UpdatedAtColumn, UpdatedByColumn, NameColumn, StateColumn, TeamIDColumn, CalendarIDColumn, StartDateAtColumn, EndDateAtColumn, StartTimeAtColumn, EndTimeAtColumn, BlockOutsideActivityColumn}
		defaultColumns             = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, StateColumn, StartDateAtColumn, EndDateAtColumn, StartTimeAtColumn, EndTimeAtColumn, BlockOutsideActivityColumn}
	)

	return workingScheduleTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                   IDColumn,
		DomainID:             DomainIDColumn,
		CreatedAt:            CreatedAtColumn,
		CreatedBy:            CreatedByColumn,
		UpdatedAt:            UpdatedAtColumn,
		UpdatedBy:            UpdatedByColumn,
		Name:                 NameColumn,
		State:                StateColumn,
		TeamID:               TeamIDColumn,
		CalendarID:           CalendarIDColumn,
		StartDateAt:          StartDateAtColumn,
		EndDateAt:            EndDateAtColumn,
		StartTimeAt:          StartTimeAtColumn,
		EndTimeAt:            EndTimeAtColumn,
		BlockOutsideActivity: BlockOutsideActivityColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
