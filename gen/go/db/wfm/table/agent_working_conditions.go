//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var AgentWorkingConditions = newAgentWorkingConditionsTable("wfm", "agent_working_conditions", "")

type agentWorkingConditionsTable struct {
	postgres.Table

	// Columns
	ID                 postgres.ColumnInteger
	DomainID           postgres.ColumnInteger
	UpdatedAt          postgres.ColumnTimestampz
	UpdatedBy          postgres.ColumnInteger
	AgentID            postgres.ColumnInteger
	WorkingConditionID postgres.ColumnInteger
	PauseTemplateID    postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type AgentWorkingConditionsTable struct {
	agentWorkingConditionsTable

	EXCLUDED agentWorkingConditionsTable
}

// AS creates new AgentWorkingConditionsTable with assigned alias
func (a AgentWorkingConditionsTable) AS(alias string) *AgentWorkingConditionsTable {
	return newAgentWorkingConditionsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AgentWorkingConditionsTable with assigned schema name
func (a AgentWorkingConditionsTable) FromSchema(schemaName string) *AgentWorkingConditionsTable {
	return newAgentWorkingConditionsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AgentWorkingConditionsTable with assigned table prefix
func (a AgentWorkingConditionsTable) WithPrefix(prefix string) *AgentWorkingConditionsTable {
	return newAgentWorkingConditionsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AgentWorkingConditionsTable with assigned table suffix
func (a AgentWorkingConditionsTable) WithSuffix(suffix string) *AgentWorkingConditionsTable {
	return newAgentWorkingConditionsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAgentWorkingConditionsTable(schemaName, tableName, alias string) *AgentWorkingConditionsTable {
	return &AgentWorkingConditionsTable{
		agentWorkingConditionsTable: newAgentWorkingConditionsTableImpl(schemaName, tableName, alias),
		EXCLUDED:                    newAgentWorkingConditionsTableImpl("", "excluded", ""),
	}
}

func newAgentWorkingConditionsTableImpl(schemaName, tableName, alias string) agentWorkingConditionsTable {
	var (
		IDColumn                 = postgres.IntegerColumn("id")
		DomainIDColumn           = postgres.IntegerColumn("domain_id")
		UpdatedAtColumn          = postgres.TimestampzColumn("updated_at")
		UpdatedByColumn          = postgres.IntegerColumn("updated_by")
		AgentIDColumn            = postgres.IntegerColumn("agent_id")
		WorkingConditionIDColumn = postgres.IntegerColumn("working_condition_id")
		PauseTemplateIDColumn    = postgres.IntegerColumn("pause_template_id")
		allColumns               = postgres.ColumnList{IDColumn, DomainIDColumn, UpdatedAtColumn, UpdatedByColumn, AgentIDColumn, WorkingConditionIDColumn, PauseTemplateIDColumn}
		mutableColumns           = postgres.ColumnList{DomainIDColumn, UpdatedAtColumn, UpdatedByColumn, AgentIDColumn, WorkingConditionIDColumn, PauseTemplateIDColumn}
		defaultColumns           = postgres.ColumnList{IDColumn, UpdatedAtColumn}
	)

	return agentWorkingConditionsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                 IDColumn,
		DomainID:           DomainIDColumn,
		UpdatedAt:          UpdatedAtColumn,
		UpdatedBy:          UpdatedByColumn,
		AgentID:            AgentIDColumn,
		WorkingConditionID: WorkingConditionIDColumn,
		PauseTemplateID:    PauseTemplateIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
