//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var ShiftTemplate = newShiftTemplateTable("wfm", "shift_template", "")

type shiftTemplateTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnInteger
	DomainID    postgres.ColumnInteger
	CreatedAt   postgres.ColumnTimestampz
	CreatedBy   postgres.ColumnInteger
	UpdatedAt   postgres.ColumnTimestampz
	UpdatedBy   postgres.ColumnInteger
	Name        postgres.ColumnString
	Description postgres.ColumnString
	Times       postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type ShiftTemplateTable struct {
	shiftTemplateTable

	EXCLUDED shiftTemplateTable
}

// AS creates new ShiftTemplateTable with assigned alias
func (a ShiftTemplateTable) AS(alias string) *ShiftTemplateTable {
	return newShiftTemplateTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ShiftTemplateTable with assigned schema name
func (a ShiftTemplateTable) FromSchema(schemaName string) *ShiftTemplateTable {
	return newShiftTemplateTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ShiftTemplateTable with assigned table prefix
func (a ShiftTemplateTable) WithPrefix(prefix string) *ShiftTemplateTable {
	return newShiftTemplateTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ShiftTemplateTable with assigned table suffix
func (a ShiftTemplateTable) WithSuffix(suffix string) *ShiftTemplateTable {
	return newShiftTemplateTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newShiftTemplateTable(schemaName, tableName, alias string) *ShiftTemplateTable {
	return &ShiftTemplateTable{
		shiftTemplateTable: newShiftTemplateTableImpl(schemaName, tableName, alias),
		EXCLUDED:           newShiftTemplateTableImpl("", "excluded", ""),
	}
}

func newShiftTemplateTableImpl(schemaName, tableName, alias string) shiftTemplateTable {
	var (
		IDColumn          = postgres.IntegerColumn("id")
		DomainIDColumn    = postgres.IntegerColumn("domain_id")
		CreatedAtColumn   = postgres.TimestampzColumn("created_at")
		CreatedByColumn   = postgres.IntegerColumn("created_by")
		UpdatedAtColumn   = postgres.TimestampzColumn("updated_at")
		UpdatedByColumn   = postgres.IntegerColumn("updated_by")
		NameColumn        = postgres.StringColumn("name")
		DescriptionColumn = postgres.StringColumn("description")
		TimesColumn       = postgres.StringColumn("times")
		allColumns        = postgres.ColumnList{IDColumn, DomainIDColumn, CreatedAtColumn, CreatedByColumn, UpdatedAtColumn, UpdatedByColumn, NameColumn, DescriptionColumn, TimesColumn}
		mutableColumns    = postgres.ColumnList{DomainIDColumn, CreatedAtColumn, CreatedByColumn, UpdatedAtColumn, UpdatedByColumn, NameColumn, DescriptionColumn, TimesColumn}
		defaultColumns    = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return shiftTemplateTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		DomainID:    DomainIDColumn,
		CreatedAt:   CreatedAtColumn,
		CreatedBy:   CreatedByColumn,
		UpdatedAt:   UpdatedAtColumn,
		UpdatedBy:   UpdatedByColumn,
		Name:        NameColumn,
		Description: DescriptionColumn,
		Times:       TimesColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
