//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var PauseTemplateACL = newPauseTemplateACLTable("wfm", "pause_template_acl", "")

type pauseTemplateACLTable struct {
	postgres.Table

	// Columns
	ID      postgres.ColumnInteger
	Dc      postgres.ColumnInteger
	Grantor postgres.ColumnInteger
	Object  postgres.ColumnInteger
	Subject postgres.ColumnInteger
	Access  postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type PauseTemplateACLTable struct {
	pauseTemplateACLTable

	EXCLUDED pauseTemplateACLTable
}

// AS creates new PauseTemplateACLTable with assigned alias
func (a PauseTemplateACLTable) AS(alias string) *PauseTemplateACLTable {
	return newPauseTemplateACLTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PauseTemplateACLTable with assigned schema name
func (a PauseTemplateACLTable) FromSchema(schemaName string) *PauseTemplateACLTable {
	return newPauseTemplateACLTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new PauseTemplateACLTable with assigned table prefix
func (a PauseTemplateACLTable) WithPrefix(prefix string) *PauseTemplateACLTable {
	return newPauseTemplateACLTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new PauseTemplateACLTable with assigned table suffix
func (a PauseTemplateACLTable) WithSuffix(suffix string) *PauseTemplateACLTable {
	return newPauseTemplateACLTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newPauseTemplateACLTable(schemaName, tableName, alias string) *PauseTemplateACLTable {
	return &PauseTemplateACLTable{
		pauseTemplateACLTable: newPauseTemplateACLTableImpl(schemaName, tableName, alias),
		EXCLUDED:              newPauseTemplateACLTableImpl("", "excluded", ""),
	}
}

func newPauseTemplateACLTableImpl(schemaName, tableName, alias string) pauseTemplateACLTable {
	var (
		IDColumn       = postgres.IntegerColumn("id")
		DcColumn       = postgres.IntegerColumn("dc")
		GrantorColumn  = postgres.IntegerColumn("grantor")
		ObjectColumn   = postgres.IntegerColumn("object")
		SubjectColumn  = postgres.IntegerColumn("subject")
		AccessColumn   = postgres.IntegerColumn("access")
		allColumns     = postgres.ColumnList{IDColumn, DcColumn, GrantorColumn, ObjectColumn, SubjectColumn, AccessColumn}
		mutableColumns = postgres.ColumnList{DcColumn, GrantorColumn, ObjectColumn, SubjectColumn, AccessColumn}
		defaultColumns = postgres.ColumnList{IDColumn, AccessColumn}
	)

	return pauseTemplateACLTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:      IDColumn,
		Dc:      DcColumn,
		Grantor: GrantorColumn,
		Object:  ObjectColumn,
		Subject: SubjectColumn,
		Access:  AccessColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
