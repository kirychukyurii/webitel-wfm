//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var WorkingCondition = newWorkingConditionTable("wfm", "working_condition", "")

type workingConditionTable struct {
	postgres.Table

	// Columns
	ID               postgres.ColumnInteger
	DomainID         postgres.ColumnInteger
	CreatedAt        postgres.ColumnTimestampz
	CreatedBy        postgres.ColumnInteger
	UpdatedAt        postgres.ColumnTimestampz
	UpdatedBy        postgres.ColumnInteger
	Name             postgres.ColumnString
	Description      postgres.ColumnString
	WorkdayHours     postgres.ColumnInteger
	WorkdaysPerMonth postgres.ColumnInteger
	Vacation         postgres.ColumnInteger
	SickLeaves       postgres.ColumnInteger
	DaysOff          postgres.ColumnInteger
	PauseDuration    postgres.ColumnInteger
	PauseTemplateID  postgres.ColumnInteger
	ShiftTemplateID  postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type WorkingConditionTable struct {
	workingConditionTable

	EXCLUDED workingConditionTable
}

// AS creates new WorkingConditionTable with assigned alias
func (a WorkingConditionTable) AS(alias string) *WorkingConditionTable {
	return newWorkingConditionTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new WorkingConditionTable with assigned schema name
func (a WorkingConditionTable) FromSchema(schemaName string) *WorkingConditionTable {
	return newWorkingConditionTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new WorkingConditionTable with assigned table prefix
func (a WorkingConditionTable) WithPrefix(prefix string) *WorkingConditionTable {
	return newWorkingConditionTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new WorkingConditionTable with assigned table suffix
func (a WorkingConditionTable) WithSuffix(suffix string) *WorkingConditionTable {
	return newWorkingConditionTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newWorkingConditionTable(schemaName, tableName, alias string) *WorkingConditionTable {
	return &WorkingConditionTable{
		workingConditionTable: newWorkingConditionTableImpl(schemaName, tableName, alias),
		EXCLUDED:              newWorkingConditionTableImpl("", "excluded", ""),
	}
}

func newWorkingConditionTableImpl(schemaName, tableName, alias string) workingConditionTable {
	var (
		IDColumn               = postgres.IntegerColumn("id")
		DomainIDColumn         = postgres.IntegerColumn("domain_id")
		CreatedAtColumn        = postgres.TimestampzColumn("created_at")
		CreatedByColumn        = postgres.IntegerColumn("created_by")
		UpdatedAtColumn        = postgres.TimestampzColumn("updated_at")
		UpdatedByColumn        = postgres.IntegerColumn("updated_by")
		NameColumn             = postgres.StringColumn("name")
		DescriptionColumn      = postgres.StringColumn("description")
		WorkdayHoursColumn     = postgres.IntegerColumn("workday_hours")
		WorkdaysPerMonthColumn = postgres.IntegerColumn("workdays_per_month")
		VacationColumn         = postgres.IntegerColumn("vacation")
		SickLeavesColumn       = postgres.IntegerColumn("sick_leaves")
		DaysOffColumn          = postgres.IntegerColumn("days_off")
		PauseDurationColumn    = postgres.IntegerColumn("pause_duration")
		PauseTemplateIDColumn  = postgres.IntegerColumn("pause_template_id")
		ShiftTemplateIDColumn  = postgres.IntegerColumn("shift_template_id")
		allColumns             = postgres.ColumnList{IDColumn, DomainIDColumn, CreatedAtColumn, CreatedByColumn, UpdatedAtColumn, UpdatedByColumn, NameColumn, DescriptionColumn, WorkdayHoursColumn, WorkdaysPerMonthColumn, VacationColumn, SickLeavesColumn, DaysOffColumn, PauseDurationColumn, PauseTemplateIDColumn, ShiftTemplateIDColumn}
		mutableColumns         = postgres.ColumnList{DomainIDColumn, CreatedAtColumn, CreatedByColumn, UpdatedAtColumn, UpdatedByColumn, NameColumn, DescriptionColumn, WorkdayHoursColumn, WorkdaysPerMonthColumn, VacationColumn, SickLeavesColumn, DaysOffColumn, PauseDurationColumn, PauseTemplateIDColumn, ShiftTemplateIDColumn}
		defaultColumns         = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return workingConditionTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:               IDColumn,
		DomainID:         DomainIDColumn,
		CreatedAt:        CreatedAtColumn,
		CreatedBy:        CreatedByColumn,
		UpdatedAt:        UpdatedAtColumn,
		UpdatedBy:        UpdatedByColumn,
		Name:             NameColumn,
		Description:      DescriptionColumn,
		WorkdayHours:     WorkdayHoursColumn,
		WorkdaysPerMonth: WorkdaysPerMonthColumn,
		Vacation:         VacationColumn,
		SickLeaves:       SickLeavesColumn,
		DaysOff:          DaysOffColumn,
		PauseDuration:    PauseDurationColumn,
		PauseTemplateID:  PauseTemplateIDColumn,
		ShiftTemplateID:  ShiftTemplateIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
