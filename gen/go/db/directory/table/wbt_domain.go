//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var WbtDomain = newWbtDomainTable("directory", "wbt_domain", "")

// Webitel Organizational Domains
type wbtDomainTable struct {
	postgres.Table

	// Columns
	Dc           postgres.ColumnInteger
	Name         postgres.ColumnString
	Organization postgres.ColumnString
	Country      postgres.ColumnString
	Locality     postgres.ColumnString
	Province     postgres.ColumnString
	Street       postgres.ColumnString
	TimezoneID   postgres.ColumnInteger
	CustomerID   postgres.ColumnString
	Attrs        postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type WbtDomainTable struct {
	wbtDomainTable

	EXCLUDED wbtDomainTable
}

// AS creates new WbtDomainTable with assigned alias
func (a WbtDomainTable) AS(alias string) *WbtDomainTable {
	return newWbtDomainTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new WbtDomainTable with assigned schema name
func (a WbtDomainTable) FromSchema(schemaName string) *WbtDomainTable {
	return newWbtDomainTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new WbtDomainTable with assigned table prefix
func (a WbtDomainTable) WithPrefix(prefix string) *WbtDomainTable {
	return newWbtDomainTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new WbtDomainTable with assigned table suffix
func (a WbtDomainTable) WithSuffix(suffix string) *WbtDomainTable {
	return newWbtDomainTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newWbtDomainTable(schemaName, tableName, alias string) *WbtDomainTable {
	return &WbtDomainTable{
		wbtDomainTable: newWbtDomainTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newWbtDomainTableImpl("", "excluded", ""),
	}
}

func newWbtDomainTableImpl(schemaName, tableName, alias string) wbtDomainTable {
	var (
		DcColumn           = postgres.IntegerColumn("dc")
		NameColumn         = postgres.StringColumn("name")
		OrganizationColumn = postgres.StringColumn("organization")
		CountryColumn      = postgres.StringColumn("country")
		LocalityColumn     = postgres.StringColumn("locality")
		ProvinceColumn     = postgres.StringColumn("province")
		StreetColumn       = postgres.StringColumn("street")
		TimezoneIDColumn   = postgres.IntegerColumn("timezone_id")
		CustomerIDColumn   = postgres.StringColumn("customer_id")
		AttrsColumn        = postgres.StringColumn("attrs")
		allColumns         = postgres.ColumnList{DcColumn, NameColumn, OrganizationColumn, CountryColumn, LocalityColumn, ProvinceColumn, StreetColumn, TimezoneIDColumn, CustomerIDColumn, AttrsColumn}
		mutableColumns     = postgres.ColumnList{NameColumn, OrganizationColumn, CountryColumn, LocalityColumn, ProvinceColumn, StreetColumn, TimezoneIDColumn, CustomerIDColumn, AttrsColumn}
		defaultColumns     = postgres.ColumnList{AttrsColumn}
	)

	return wbtDomainTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Dc:           DcColumn,
		Name:         NameColumn,
		Organization: OrganizationColumn,
		Country:      CountryColumn,
		Locality:     LocalityColumn,
		Province:     ProvinceColumn,
		Street:       StreetColumn,
		TimezoneID:   TimezoneIDColumn,
		CustomerID:   CustomerIDColumn,
		Attrs:        AttrsColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
