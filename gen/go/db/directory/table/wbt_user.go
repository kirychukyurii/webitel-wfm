//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var WbtUser = newWbtUserTable("directory", "wbt_user", "")

type wbtUserTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnInteger
	Dc        postgres.ColumnInteger
	Name      postgres.ColumnString
	Email     postgres.ColumnString
	Username  postgres.ColumnString
	Password  postgres.ColumnString
	Extension postgres.ColumnString
	Profile   postgres.ColumnString
	Dnd       postgres.ColumnBool
	Online    postgres.ColumnInteger
	Status    postgres.ColumnString
	CreatedAt postgres.ColumnTimestamp
	CreatedBy postgres.ColumnInteger
	UpdatedAt postgres.ColumnTimestamp
	UpdatedBy postgres.ColumnInteger
	DeletedAt postgres.ColumnTimestamp
	DeletedBy postgres.ColumnInteger
	DeviceID  postgres.ColumnInteger // Default SIP Register Endpoint Credentials
	Envars    postgres.ColumnString
	ContactID postgres.ColumnInteger
	ChatName  postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type WbtUserTable struct {
	wbtUserTable

	EXCLUDED wbtUserTable
}

// AS creates new WbtUserTable with assigned alias
func (a WbtUserTable) AS(alias string) *WbtUserTable {
	return newWbtUserTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new WbtUserTable with assigned schema name
func (a WbtUserTable) FromSchema(schemaName string) *WbtUserTable {
	return newWbtUserTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new WbtUserTable with assigned table prefix
func (a WbtUserTable) WithPrefix(prefix string) *WbtUserTable {
	return newWbtUserTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new WbtUserTable with assigned table suffix
func (a WbtUserTable) WithSuffix(suffix string) *WbtUserTable {
	return newWbtUserTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newWbtUserTable(schemaName, tableName, alias string) *WbtUserTable {
	return &WbtUserTable{
		wbtUserTable: newWbtUserTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newWbtUserTableImpl("", "excluded", ""),
	}
}

func newWbtUserTableImpl(schemaName, tableName, alias string) wbtUserTable {
	var (
		IDColumn        = postgres.IntegerColumn("id")
		DcColumn        = postgres.IntegerColumn("dc")
		NameColumn      = postgres.StringColumn("name")
		EmailColumn     = postgres.StringColumn("email")
		UsernameColumn  = postgres.StringColumn("username")
		PasswordColumn  = postgres.StringColumn("password")
		ExtensionColumn = postgres.StringColumn("extension")
		ProfileColumn   = postgres.StringColumn("profile")
		DndColumn       = postgres.BoolColumn("dnd")
		OnlineColumn    = postgres.IntegerColumn("online")
		StatusColumn    = postgres.StringColumn("status")
		CreatedAtColumn = postgres.TimestampColumn("created_at")
		CreatedByColumn = postgres.IntegerColumn("created_by")
		UpdatedAtColumn = postgres.TimestampColumn("updated_at")
		UpdatedByColumn = postgres.IntegerColumn("updated_by")
		DeletedAtColumn = postgres.TimestampColumn("deleted_at")
		DeletedByColumn = postgres.IntegerColumn("deleted_by")
		DeviceIDColumn  = postgres.IntegerColumn("device_id")
		EnvarsColumn    = postgres.StringColumn("envars")
		ContactIDColumn = postgres.IntegerColumn("contact_id")
		ChatNameColumn  = postgres.StringColumn("chat_name")
		allColumns      = postgres.ColumnList{IDColumn, DcColumn, NameColumn, EmailColumn, UsernameColumn, PasswordColumn, ExtensionColumn, ProfileColumn, DndColumn, OnlineColumn, StatusColumn, CreatedAtColumn, CreatedByColumn, UpdatedAtColumn, UpdatedByColumn, DeletedAtColumn, DeletedByColumn, DeviceIDColumn, EnvarsColumn, ContactIDColumn, ChatNameColumn}
		mutableColumns  = postgres.ColumnList{DcColumn, NameColumn, EmailColumn, UsernameColumn, PasswordColumn, ExtensionColumn, ProfileColumn, DndColumn, OnlineColumn, StatusColumn, CreatedAtColumn, CreatedByColumn, UpdatedAtColumn, UpdatedByColumn, DeletedAtColumn, DeletedByColumn, DeviceIDColumn, EnvarsColumn, ContactIDColumn, ChatNameColumn}
		defaultColumns  = postgres.ColumnList{IDColumn, DndColumn, OnlineColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return wbtUserTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		Dc:        DcColumn,
		Name:      NameColumn,
		Email:     EmailColumn,
		Username:  UsernameColumn,
		Password:  PasswordColumn,
		Extension: ExtensionColumn,
		Profile:   ProfileColumn,
		Dnd:       DndColumn,
		Online:    OnlineColumn,
		Status:    StatusColumn,
		CreatedAt: CreatedAtColumn,
		CreatedBy: CreatedByColumn,
		UpdatedAt: UpdatedAtColumn,
		UpdatedBy: UpdatedByColumn,
		DeletedAt: DeletedAtColumn,
		DeletedBy: DeletedByColumn,
		DeviceID:  DeviceIDColumn,
		Envars:    EnvarsColumn,
		ContactID: ContactIDColumn,
		ChatName:  ChatNameColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
