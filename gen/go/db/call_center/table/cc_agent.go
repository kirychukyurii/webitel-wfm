//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var CcAgent = newCcAgentTable("call_center", "cc_agent", "")

type ccAgentTable struct {
	postgres.Table

	// Columns
	ID               postgres.ColumnInteger
	UserID           postgres.ColumnInteger
	UpdatedAt        postgres.ColumnInteger
	Status           postgres.ColumnString
	Description      postgres.ColumnString
	DomainID         postgres.ColumnInteger
	CreatedAt        postgres.ColumnInteger
	CreatedBy        postgres.ColumnInteger
	UpdatedBy        postgres.ColumnInteger
	StatusPayload    postgres.ColumnString
	ProgressiveCount postgres.ColumnInteger
	LastStateChange  postgres.ColumnTimestampz
	OnDemand         postgres.ColumnBool
	AllowChannels    postgres.ColumnString
	GreetingMediaID  postgres.ColumnInteger
	ChatCount        postgres.ColumnInteger
	TeamID           postgres.ColumnInteger
	RegionID         postgres.ColumnInteger
	Supervisor       postgres.ColumnBool
	SupervisorIds    postgres.ColumnString
	AuditorIds       postgres.ColumnString
	TaskCount        postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type CcAgentTable struct {
	ccAgentTable

	EXCLUDED ccAgentTable
}

// AS creates new CcAgentTable with assigned alias
func (a CcAgentTable) AS(alias string) *CcAgentTable {
	return newCcAgentTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CcAgentTable with assigned schema name
func (a CcAgentTable) FromSchema(schemaName string) *CcAgentTable {
	return newCcAgentTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CcAgentTable with assigned table prefix
func (a CcAgentTable) WithPrefix(prefix string) *CcAgentTable {
	return newCcAgentTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CcAgentTable with assigned table suffix
func (a CcAgentTable) WithSuffix(suffix string) *CcAgentTable {
	return newCcAgentTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCcAgentTable(schemaName, tableName, alias string) *CcAgentTable {
	return &CcAgentTable{
		ccAgentTable: newCcAgentTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newCcAgentTableImpl("", "excluded", ""),
	}
}

func newCcAgentTableImpl(schemaName, tableName, alias string) ccAgentTable {
	var (
		IDColumn               = postgres.IntegerColumn("id")
		UserIDColumn           = postgres.IntegerColumn("user_id")
		UpdatedAtColumn        = postgres.IntegerColumn("updated_at")
		StatusColumn           = postgres.StringColumn("status")
		DescriptionColumn      = postgres.StringColumn("description")
		DomainIDColumn         = postgres.IntegerColumn("domain_id")
		CreatedAtColumn        = postgres.IntegerColumn("created_at")
		CreatedByColumn        = postgres.IntegerColumn("created_by")
		UpdatedByColumn        = postgres.IntegerColumn("updated_by")
		StatusPayloadColumn    = postgres.StringColumn("status_payload")
		ProgressiveCountColumn = postgres.IntegerColumn("progressive_count")
		LastStateChangeColumn  = postgres.TimestampzColumn("last_state_change")
		OnDemandColumn         = postgres.BoolColumn("on_demand")
		AllowChannelsColumn    = postgres.StringColumn("allow_channels")
		GreetingMediaIDColumn  = postgres.IntegerColumn("greeting_media_id")
		ChatCountColumn        = postgres.IntegerColumn("chat_count")
		TeamIDColumn           = postgres.IntegerColumn("team_id")
		RegionIDColumn         = postgres.IntegerColumn("region_id")
		SupervisorColumn       = postgres.BoolColumn("supervisor")
		SupervisorIdsColumn    = postgres.StringColumn("supervisor_ids")
		AuditorIdsColumn       = postgres.StringColumn("auditor_ids")
		TaskCountColumn        = postgres.IntegerColumn("task_count")
		allColumns             = postgres.ColumnList{IDColumn, UserIDColumn, UpdatedAtColumn, StatusColumn, DescriptionColumn, DomainIDColumn, CreatedAtColumn, CreatedByColumn, UpdatedByColumn, StatusPayloadColumn, ProgressiveCountColumn, LastStateChangeColumn, OnDemandColumn, AllowChannelsColumn, GreetingMediaIDColumn, ChatCountColumn, TeamIDColumn, RegionIDColumn, SupervisorColumn, SupervisorIdsColumn, AuditorIdsColumn, TaskCountColumn}
		mutableColumns         = postgres.ColumnList{UserIDColumn, UpdatedAtColumn, StatusColumn, DescriptionColumn, DomainIDColumn, CreatedAtColumn, CreatedByColumn, UpdatedByColumn, StatusPayloadColumn, ProgressiveCountColumn, LastStateChangeColumn, OnDemandColumn, AllowChannelsColumn, GreetingMediaIDColumn, ChatCountColumn, TeamIDColumn, RegionIDColumn, SupervisorColumn, SupervisorIdsColumn, AuditorIdsColumn, TaskCountColumn}
		defaultColumns         = postgres.ColumnList{IDColumn, UpdatedAtColumn, StatusColumn, DescriptionColumn, ProgressiveCountColumn, LastStateChangeColumn, OnDemandColumn, AllowChannelsColumn, ChatCountColumn, SupervisorColumn, TaskCountColumn}
	)

	return ccAgentTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:               IDColumn,
		UserID:           UserIDColumn,
		UpdatedAt:        UpdatedAtColumn,
		Status:           StatusColumn,
		Description:      DescriptionColumn,
		DomainID:         DomainIDColumn,
		CreatedAt:        CreatedAtColumn,
		CreatedBy:        CreatedByColumn,
		UpdatedBy:        UpdatedByColumn,
		StatusPayload:    StatusPayloadColumn,
		ProgressiveCount: ProgressiveCountColumn,
		LastStateChange:  LastStateChangeColumn,
		OnDemand:         OnDemandColumn,
		AllowChannels:    AllowChannelsColumn,
		GreetingMediaID:  GreetingMediaIDColumn,
		ChatCount:        ChatCountColumn,
		TeamID:           TeamIDColumn,
		RegionID:         RegionIDColumn,
		Supervisor:       SupervisorColumn,
		SupervisorIds:    SupervisorIdsColumn,
		AuditorIds:       AuditorIdsColumn,
		TaskCount:        TaskCountColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
