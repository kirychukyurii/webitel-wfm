//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var CcTeam = newCcTeamTable("call_center", "cc_team", "")

type ccTeamTable struct {
	postgres.Table

	// Columns
	ID                    postgres.ColumnInteger
	DomainID              postgres.ColumnInteger
	Name                  postgres.ColumnString
	Description           postgres.ColumnString
	Strategy              postgres.ColumnString
	MaxNoAnswer           postgres.ColumnInteger
	WrapUpTime            postgres.ColumnInteger
	NoAnswerDelayTime     postgres.ColumnInteger
	CallTimeout           postgres.ColumnInteger
	UpdatedAt             postgres.ColumnInteger
	CreatedAt             postgres.ColumnInteger
	CreatedBy             postgres.ColumnInteger
	UpdatedBy             postgres.ColumnInteger
	AdminIds              postgres.ColumnString
	InviteChatTimeout     postgres.ColumnInteger
	TaskAcceptTimeout     postgres.ColumnInteger
	ForecastCalculationID postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type CcTeamTable struct {
	ccTeamTable

	EXCLUDED ccTeamTable
}

// AS creates new CcTeamTable with assigned alias
func (a CcTeamTable) AS(alias string) *CcTeamTable {
	return newCcTeamTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CcTeamTable with assigned schema name
func (a CcTeamTable) FromSchema(schemaName string) *CcTeamTable {
	return newCcTeamTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CcTeamTable with assigned table prefix
func (a CcTeamTable) WithPrefix(prefix string) *CcTeamTable {
	return newCcTeamTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CcTeamTable with assigned table suffix
func (a CcTeamTable) WithSuffix(suffix string) *CcTeamTable {
	return newCcTeamTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCcTeamTable(schemaName, tableName, alias string) *CcTeamTable {
	return &CcTeamTable{
		ccTeamTable: newCcTeamTableImpl(schemaName, tableName, alias),
		EXCLUDED:    newCcTeamTableImpl("", "excluded", ""),
	}
}

func newCcTeamTableImpl(schemaName, tableName, alias string) ccTeamTable {
	var (
		IDColumn                    = postgres.IntegerColumn("id")
		DomainIDColumn              = postgres.IntegerColumn("domain_id")
		NameColumn                  = postgres.StringColumn("name")
		DescriptionColumn           = postgres.StringColumn("description")
		StrategyColumn              = postgres.StringColumn("strategy")
		MaxNoAnswerColumn           = postgres.IntegerColumn("max_no_answer")
		WrapUpTimeColumn            = postgres.IntegerColumn("wrap_up_time")
		NoAnswerDelayTimeColumn     = postgres.IntegerColumn("no_answer_delay_time")
		CallTimeoutColumn           = postgres.IntegerColumn("call_timeout")
		UpdatedAtColumn             = postgres.IntegerColumn("updated_at")
		CreatedAtColumn             = postgres.IntegerColumn("created_at")
		CreatedByColumn             = postgres.IntegerColumn("created_by")
		UpdatedByColumn             = postgres.IntegerColumn("updated_by")
		AdminIdsColumn              = postgres.StringColumn("admin_ids")
		InviteChatTimeoutColumn     = postgres.IntegerColumn("invite_chat_timeout")
		TaskAcceptTimeoutColumn     = postgres.IntegerColumn("task_accept_timeout")
		ForecastCalculationIDColumn = postgres.IntegerColumn("forecast_calculation_id")
		allColumns                  = postgres.ColumnList{IDColumn, DomainIDColumn, NameColumn, DescriptionColumn, StrategyColumn, MaxNoAnswerColumn, WrapUpTimeColumn, NoAnswerDelayTimeColumn, CallTimeoutColumn, UpdatedAtColumn, CreatedAtColumn, CreatedByColumn, UpdatedByColumn, AdminIdsColumn, InviteChatTimeoutColumn, TaskAcceptTimeoutColumn, ForecastCalculationIDColumn}
		mutableColumns              = postgres.ColumnList{DomainIDColumn, NameColumn, DescriptionColumn, StrategyColumn, MaxNoAnswerColumn, WrapUpTimeColumn, NoAnswerDelayTimeColumn, CallTimeoutColumn, UpdatedAtColumn, CreatedAtColumn, CreatedByColumn, UpdatedByColumn, AdminIdsColumn, InviteChatTimeoutColumn, TaskAcceptTimeoutColumn, ForecastCalculationIDColumn}
		defaultColumns              = postgres.ColumnList{IDColumn, DescriptionColumn, MaxNoAnswerColumn, WrapUpTimeColumn, NoAnswerDelayTimeColumn, CallTimeoutColumn, UpdatedAtColumn, InviteChatTimeoutColumn, TaskAcceptTimeoutColumn}
	)

	return ccTeamTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                    IDColumn,
		DomainID:              DomainIDColumn,
		Name:                  NameColumn,
		Description:           DescriptionColumn,
		Strategy:              StrategyColumn,
		MaxNoAnswer:           MaxNoAnswerColumn,
		WrapUpTime:            WrapUpTimeColumn,
		NoAnswerDelayTime:     NoAnswerDelayTimeColumn,
		CallTimeout:           CallTimeoutColumn,
		UpdatedAt:             UpdatedAtColumn,
		CreatedAt:             CreatedAtColumn,
		CreatedBy:             CreatedByColumn,
		UpdatedBy:             UpdatedByColumn,
		AdminIds:              AdminIdsColumn,
		InviteChatTimeout:     InviteChatTimeoutColumn,
		TaskAcceptTimeout:     TaskAcceptTimeoutColumn,
		ForecastCalculationID: ForecastCalculationIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
