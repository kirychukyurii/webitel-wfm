//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var CcPauseCause = newCcPauseCauseTable("call_center", "cc_pause_cause", "")

type ccPauseCauseTable struct {
	postgres.Table

	// Columns
	ID              postgres.ColumnInteger
	Name            postgres.ColumnString
	LimitMin        postgres.ColumnInteger
	AllowSupervisor postgres.ColumnBool
	AllowAgent      postgres.ColumnBool
	DomainID        postgres.ColumnInteger
	CreatedAt       postgres.ColumnTimestampz
	UpdatedAt       postgres.ColumnTimestampz
	CreatedBy       postgres.ColumnInteger
	UpdatedBy       postgres.ColumnInteger
	Description     postgres.ColumnString
	AllowAdmin      postgres.ColumnBool

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type CcPauseCauseTable struct {
	ccPauseCauseTable

	EXCLUDED ccPauseCauseTable
}

// AS creates new CcPauseCauseTable with assigned alias
func (a CcPauseCauseTable) AS(alias string) *CcPauseCauseTable {
	return newCcPauseCauseTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CcPauseCauseTable with assigned schema name
func (a CcPauseCauseTable) FromSchema(schemaName string) *CcPauseCauseTable {
	return newCcPauseCauseTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CcPauseCauseTable with assigned table prefix
func (a CcPauseCauseTable) WithPrefix(prefix string) *CcPauseCauseTable {
	return newCcPauseCauseTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CcPauseCauseTable with assigned table suffix
func (a CcPauseCauseTable) WithSuffix(suffix string) *CcPauseCauseTable {
	return newCcPauseCauseTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCcPauseCauseTable(schemaName, tableName, alias string) *CcPauseCauseTable {
	return &CcPauseCauseTable{
		ccPauseCauseTable: newCcPauseCauseTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newCcPauseCauseTableImpl("", "excluded", ""),
	}
}

func newCcPauseCauseTableImpl(schemaName, tableName, alias string) ccPauseCauseTable {
	var (
		IDColumn              = postgres.IntegerColumn("id")
		NameColumn            = postgres.StringColumn("name")
		LimitMinColumn        = postgres.IntegerColumn("limit_min")
		AllowSupervisorColumn = postgres.BoolColumn("allow_supervisor")
		AllowAgentColumn      = postgres.BoolColumn("allow_agent")
		DomainIDColumn        = postgres.IntegerColumn("domain_id")
		CreatedAtColumn       = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn       = postgres.TimestampzColumn("updated_at")
		CreatedByColumn       = postgres.IntegerColumn("created_by")
		UpdatedByColumn       = postgres.IntegerColumn("updated_by")
		DescriptionColumn     = postgres.StringColumn("description")
		AllowAdminColumn      = postgres.BoolColumn("allow_admin")
		allColumns            = postgres.ColumnList{IDColumn, NameColumn, LimitMinColumn, AllowSupervisorColumn, AllowAgentColumn, DomainIDColumn, CreatedAtColumn, UpdatedAtColumn, CreatedByColumn, UpdatedByColumn, DescriptionColumn, AllowAdminColumn}
		mutableColumns        = postgres.ColumnList{NameColumn, LimitMinColumn, AllowSupervisorColumn, AllowAgentColumn, DomainIDColumn, CreatedAtColumn, UpdatedAtColumn, CreatedByColumn, UpdatedByColumn, DescriptionColumn, AllowAdminColumn}
		defaultColumns        = postgres.ColumnList{IDColumn, LimitMinColumn, AllowSupervisorColumn, AllowAgentColumn, CreatedAtColumn, UpdatedAtColumn, DescriptionColumn, AllowAdminColumn}
	)

	return ccPauseCauseTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:              IDColumn,
		Name:            NameColumn,
		LimitMin:        LimitMinColumn,
		AllowSupervisor: AllowSupervisorColumn,
		AllowAgent:      AllowAgentColumn,
		DomainID:        DomainIDColumn,
		CreatedAt:       CreatedAtColumn,
		UpdatedAt:       UpdatedAtColumn,
		CreatedBy:       CreatedByColumn,
		UpdatedBy:       UpdatedByColumn,
		Description:     DescriptionColumn,
		AllowAdmin:      AllowAdminColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
